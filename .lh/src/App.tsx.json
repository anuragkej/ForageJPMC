{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1718372323855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718372364304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n     this.state = {\n       // data saves the server responds.\n       // We use this state to parse data down to the child element (Graph) as element property\n       data: [],\n+      showGraph = false,\n     };\n   }\n \n   /**\n"
                },
                {
                    "date": 1718372370606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+import React, { Component } from \"react\";\n+import DataStreamer, { ServerRespond } from \"./DataStreamer\";\n+import Graph from \"./Graph\";\n+import \"./App.css\";\n+\n+/**\n+ * State declaration for <App />\n+ */\n+interface IState {\n+  data: ServerRespond[];\n+  showGraph: boolean;\n+}\n+\n+/**\n+ * The parent element of the react app.\n+ * It renders title, button and Graph react element.\n+ */\n+class App extends Component<{}, IState> {\n+  constructor(props: {}) {\n+    super(props);\n+\n+    this.state = {\n+      // data saves the server responds.\n+      // We use this state to parse data down to the child element (Graph) as element property\n+      data: [],\n+      showGraph: false,\n+    };\n+  }\n+\n+  /**\n+   * Render Graph react component with state.data parse as property data\n+   */\n+  renderGraph() {\n+    return <Graph data={this.state.data} />;\n+  }\n+\n+  /**\n+   * Get new data from server and update the state with the new data\n+   */\n+  getDataFromServer() {\n+    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n+      // Update the state by creating a new array of data that consists of\n+      // Previous data in the state and the new data from server\n+      this.setState({ data: [...this.state.data, ...serverResponds] });\n+    });\n+  }\n+\n+  /**\n+   * Render the App react component\n+   */\n+  render() {\n+    return (\n+      <div className=\"App\">\n+        <header className=\"App-header\">Bank & Merge Co Task 2</header>\n+        <div className=\"App-content\">\n+          <button\n+            className=\"btn btn-primary Stream-button\"\n+            // when button is click, our react app tries to request\n+            // new data from the server.\n+            // As part of your task, update the getDataFromServer() function\n+            // to keep requesting the data every 100ms until the app is closed\n+            // or the server does not return anymore data.\n+            onClick={() => {\n+              this.getDataFromServer();\n+            }}\n+          >\n+            Start Streaming Data\n+          </button>\n+          <div className=\"Graph\">{this.renderGraph()}</div>\n+        </div>\n+      </div>\n+    );\n+  }\n+}\n+\n+export default App;\n"
                },
                {
                    "date": 1718372403739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,11 @@\n   /**\n    * Render Graph react component with state.data parse as property data\n    */\n   renderGraph() {\n-    return <Graph data={this.state.data} />;\n+    if (this.state.showGraph) {\n+      return <Graph data={this.state.data} />;\n+    }\n   }\n \n   /**\n    * Get new data from server and update the state with the new data\n@@ -73,80 +75,4 @@\n   }\n }\n \n export default App;\n-import React, { Component } from \"react\";\n-import DataStreamer, { ServerRespond } from \"./DataStreamer\";\n-import Graph from \"./Graph\";\n-import \"./App.css\";\n-\n-/**\n- * State declaration for <App />\n- */\n-interface IState {\n-  data: ServerRespond[];\n-  showGraph: boolean;\n-}\n-\n-/**\n- * The parent element of the react app.\n- * It renders title, button and Graph react element.\n- */\n-class App extends Component<{}, IState> {\n-  constructor(props: {}) {\n-    super(props);\n-\n-    this.state = {\n-      // data saves the server responds.\n-      // We use this state to parse data down to the child element (Graph) as element property\n-      data: [],\n-      showGraph = false,\n-    };\n-  }\n-\n-  /**\n-   * Render Graph react component with state.data parse as property data\n-   */\n-  renderGraph() {\n-    return <Graph data={this.state.data} />;\n-  }\n-\n-  /**\n-   * Get new data from server and update the state with the new data\n-   */\n-  getDataFromServer() {\n-    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n-      // Update the state by creating a new array of data that consists of\n-      // Previous data in the state and the new data from server\n-      this.setState({ data: [...this.state.data, ...serverResponds] });\n-    });\n-  }\n-\n-  /**\n-   * Render the App react component\n-   */\n-  render() {\n-    return (\n-      <div className=\"App\">\n-        <header className=\"App-header\">Bank & Merge Co Task 2</header>\n-        <div className=\"App-content\">\n-          <button\n-            className=\"btn btn-primary Stream-button\"\n-            // when button is click, our react app tries to request\n-            // new data from the server.\n-            // As part of your task, update the getDataFromServer() function\n-            // to keep requesting the data every 100ms until the app is closed\n-            // or the server does not return anymore data.\n-            onClick={() => {\n-              this.getDataFromServer();\n-            }}\n-          >\n-            Start Streaming Data\n-          </button>\n-          <div className=\"Graph\">{this.renderGraph()}</div>\n-        </div>\n-      </div>\n-    );\n-  }\n-}\n-\n-export default App;\n"
                },
                {
                    "date": 1718372688681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+import React, { Component } from \"react\";\n+import DataStreamer, { ServerRespond } from \"./DataStreamer\";\n+import Graph from \"./Graph\";\n+import \"./App.css\";\n+\n+/**\n+ * State declaration for <App />\n+ */\n+interface IState {\n+  data: ServerRespond[];\n+  showGraph: boolean;\n+}\n+\n+/**\n+ * The parent element of the react app.\n+ * It renders title, button and Graph react element.\n+ */\n+class App extends Component<{}, IState> {\n+  constructor(props: {}) {\n+    super(props);\n+\n+    this.state = {\n+      // data saves the server responds.\n+      // We use this state to parse data down to the child element (Graph) as element property\n+      data: [],\n+      showGraph: false,\n+    };\n+  }\n+\n+  /**\n+   * Render Graph react component with state.data parse as property data\n+   */\n+  renderGraph() {\n+    if (this.state.showGraph) {\n+      return <Graph data={this.state.data} />;\n+    }\n+  }\n+\n+  /**\n+   * Get new data from server and update the state with the new data\n+   */\n+  getDataFromServer() {\n+    let x = 0;\n+    const interval = setInterval(() =>\n+    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n+      // Update the state by creating a new array of data that consists of\n+      // Previous data in the state and the new data from server\n+      this.setState({ data: serverResponds, \n+        showGraph: true\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Render the App react component\n+   */\n+  render() {\n+    return (\n+      <div className=\"App\">\n+        <header className=\"App-header\">Bank & Merge Co Task 2</header>\n+        <div className=\"App-content\">\n+          <button\n+            className=\"btn btn-primary Stream-button\"\n+            // when button is click, our react app tries to request\n+            // new data from the server.\n+            // As part of your task, update the getDataFromServer() function\n+            // to keep requesting the data every 100ms until the app is closed\n+            // or the server does not return anymore data.\n+            onClick={() => {\n+              this.getDataFromServer();\n+            }}\n+          >\n+            Start Streaming Data\n+          </button>\n+          <div className=\"Graph\">{this.renderGraph()}</div>\n+        </div>\n+      </div>\n+    );\n+  }\n+}\n+\n+export default App;\n"
                },
                {
                    "date": 1718372731103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import React, { Component } from \"react\";\n+import DataStreamer, { ServerRespond } from \"./DataStreamer\";\n+import Graph from \"./Graph\";\n+import \"./App.css\";\n+\n+/**\n+ * State declaration for <App />\n+ */\n+interface IState {\n+  data: ServerRespond[];\n+  showGraph: boolean;\n+}\n+\n+/**\n+ * The parent element of the react app.\n+ * It renders title, button and Graph react element.\n+ */\n+class App extends Component<{}, IState> {\n+  constructor(props: {}) {\n+    super(props);\n+\n+    this.state = {\n+      // data saves the server responds.\n+      // We use this state to parse data down to the child element (Graph) as element property\n+      data: [],\n+      showGraph: false,\n+    };\n+  }\n+\n+  /**\n+   * Render Graph react component with state.data parse as property data\n+   */\n+  renderGraph() {\n+    if (this.state.showGraph) {\n+      return <Graph data={this.state.data} />;\n+    }\n+  }\n+\n+  /**\n+   * Get new data from server and update the state with the new data\n+   */\n+  getDataFromServer() {\n+    let x = 0;\n+    const interval = setInterval(() =>\n+    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n+      // Update the state by creating a new array of data that consists of\n+      // Previous data in the state and the new data from server\n+      this.setState({ data: serverResponds, \n+        showGraph: true\n+      });\n+    });\n+    x++\n+    if (x > 1000){\n+      clearInterval(interval)\n+    }\n+  },100);\n+  }\n+\n+  /**\n+   * Render the App react component\n+   */\n+  render() {\n+    return (\n+      <div className=\"App\">\n+        <header className=\"App-header\">Bank & Merge Co Task 2</header>\n+        <div className=\"App-content\">\n+          <button\n+            className=\"btn btn-primary Stream-button\"\n+            // when button is click, our react app tries to request\n+            // new data from the server.\n+            // As part of your task, update the getDataFromServer() function\n+            // to keep requesting the data every 100ms until the app is closed\n+            // or the server does not return anymore data.\n+            onClick={() => {\n+              this.getDataFromServer();\n+            }}\n+          >\n+            Start Streaming Data\n+          </button>\n+          <div className=\"Graph\">{this.renderGraph()}</div>\n+        </div>\n+      </div>\n+    );\n+  }\n+}\n+\n+export default App;\n"
                },
                {
                    "date": 1718372769243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,17 +44,18 @@\n     const interval = setInterval(() =>\n     DataStreamer.getData((serverResponds: ServerRespond[]) => {\n       // Update the state by creating a new array of data that consists of\n       // Previous data in the state and the new data from server\n-      this.setState({ data: serverResponds, \n+      this.setState({ \n+        data: serverResponds, \n         showGraph: true\n       });\n     });\n     x++\n     if (x > 1000){\n       clearInterval(interval)\n     }\n-  },100);\n+  }, 100);\n   }\n \n   /**\n    * Render the App react component\n@@ -84,164 +85,4 @@\n   }\n }\n \n export default App;\n-import React, { Component } from \"react\";\n-import DataStreamer, { ServerRespond } from \"./DataStreamer\";\n-import Graph from \"./Graph\";\n-import \"./App.css\";\n-\n-/**\n- * State declaration for <App />\n- */\n-interface IState {\n-  data: ServerRespond[];\n-  showGraph: boolean;\n-}\n-\n-/**\n- * The parent element of the react app.\n- * It renders title, button and Graph react element.\n- */\n-class App extends Component<{}, IState> {\n-  constructor(props: {}) {\n-    super(props);\n-\n-    this.state = {\n-      // data saves the server responds.\n-      // We use this state to parse data down to the child element (Graph) as element property\n-      data: [],\n-      showGraph: false,\n-    };\n-  }\n-\n-  /**\n-   * Render Graph react component with state.data parse as property data\n-   */\n-  renderGraph() {\n-    if (this.state.showGraph) {\n-      return <Graph data={this.state.data} />;\n-    }\n-  }\n-\n-  /**\n-   * Get new data from server and update the state with the new data\n-   */\n-  getDataFromServer() {\n-    let x = 0;\n-    const interval = setInterval(() =>\n-    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n-      // Update the state by creating a new array of data that consists of\n-      // Previous data in the state and the new data from server\n-      this.setState({ data: serverResponds, \n-        showGraph: true\n-      });\n-    });\n-  }\n-\n-  /**\n-   * Render the App react component\n-   */\n-  render() {\n-    return (\n-      <div className=\"App\">\n-        <header className=\"App-header\">Bank & Merge Co Task 2</header>\n-        <div className=\"App-content\">\n-          <button\n-            className=\"btn btn-primary Stream-button\"\n-            // when button is click, our react app tries to request\n-            // new data from the server.\n-            // As part of your task, update the getDataFromServer() function\n-            // to keep requesting the data every 100ms until the app is closed\n-            // or the server does not return anymore data.\n-            onClick={() => {\n-              this.getDataFromServer();\n-            }}\n-          >\n-            Start Streaming Data\n-          </button>\n-          <div className=\"Graph\">{this.renderGraph()}</div>\n-        </div>\n-      </div>\n-    );\n-  }\n-}\n-\n-export default App;\n-import React, { Component } from \"react\";\n-import DataStreamer, { ServerRespond } from \"./DataStreamer\";\n-import Graph from \"./Graph\";\n-import \"./App.css\";\n-\n-/**\n- * State declaration for <App />\n- */\n-interface IState {\n-  data: ServerRespond[];\n-  showGraph: boolean;\n-}\n-\n-/**\n- * The parent element of the react app.\n- * It renders title, button and Graph react element.\n- */\n-class App extends Component<{}, IState> {\n-  constructor(props: {}) {\n-    super(props);\n-\n-    this.state = {\n-      // data saves the server responds.\n-      // We use this state to parse data down to the child element (Graph) as element property\n-      data: [],\n-      showGraph: false,\n-    };\n-  }\n-\n-  /**\n-   * Render Graph react component with state.data parse as property data\n-   */\n-  renderGraph() {\n-    if (this.state.showGraph) {\n-      return <Graph data={this.state.data} />;\n-    }\n-  }\n-\n-  /**\n-   * Get new data from server and update the state with the new data\n-   */\n-  getDataFromServer() {\n-    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n-      // Update the state by creating a new array of data that consists of\n-      // Previous data in the state and the new data from server\n-      this.setState({ data: [...this.state.data, ...serverResponds] });\n-    });\n-  }\n-\n-  /**\n-   * Render the App react component\n-   */\n-  render() {\n-    return (\n-      <div className=\"App\">\n-        <header className=\"App-header\">Bank & Merge Co Task 2</header>\n-        <div className=\"App-content\">\n-          <button\n-            className=\"btn btn-primary Stream-button\"\n-            // when button is click, our react app tries to request\n-            // new data from the server.\n-            // As part of your task, update the getDataFromServer() function\n-            // to keep requesting the data every 100ms until the app is closed\n-            // or the server does not return anymore data.\n-            onClick={() => {\n-              this.getDataFromServer();\n-            }}\n-          >\n-            Start Streaming Data\n-          </button>\n-          <div className=\"Graph\">{this.renderGraph()}</div>\n-        </div>\n-      </div>\n-    );\n-  }\n-}\n-\n-export default App;\n"
                },
                {
                    "date": 1718372777811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,10 @@\n     x++\n     if (x > 1000){\n       clearInterval(interval)\n     }\n-  }, 100);\n   }\n+  }\n \n   /**\n    * Render the App react component\n    */\n"
                },
                {
                    "date": 1718372787111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,15 +48,15 @@\n       this.setState({ \n         data: serverResponds, \n         showGraph: true\n       });\n-    });\n+    }),\n     x++\n     if (x > 1000){\n       clearInterval(interval)\n     }\n+  };\n   }\n-  }\n \n   /**\n    * Render the App react component\n    */\n"
                },
                {
                    "date": 1718372845980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,22 +40,22 @@\n    * Get new data from server and update the state with the new data\n    */\n   getDataFromServer() {\n     let x = 0;\n-    const interval = setInterval(() =>\n-    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n-      // Update the state by creating a new array of data that consists of\n-      // Previous data in the state and the new data from server\n-      this.setState({ \n-        data: serverResponds, \n-        showGraph: true\n+    const interval = setInterval(() => {\n+      DataStreamer.getData((serverResponds: ServerRespond[]) => {\n+        // Update the state by creating a new array of data that consists of\n+        // Previous data in the state and the new data from server\n+        this.setState({\n+          data: serverResponds,\n+          showGraph: true,\n+        });\n       });\n-    }),\n-    x++\n-    if (x > 1000){\n-      clearInterval(interval)\n-    }\n-  };\n+      x++;\n+      if (x > 1000) {\n+        clearInterval(interval);\n+      }\n+    }, 100);\n   }\n \n   /**\n    * Render the App react component\n"
                }
            ],
            "date": 1718372323855,
            "name": "Commit-0",
            "content": "import React, { Component } from \"react\";\nimport DataStreamer, { ServerRespond } from \"./DataStreamer\";\nimport Graph from \"./Graph\";\nimport \"./App.css\";\n\n/**\n * State declaration for <App />\n */\ninterface IState {\n  data: ServerRespond[];\n  showGraph: boolean;\n}\n\n/**\n * The parent element of the react app.\n * It renders title, button and Graph react element.\n */\nclass App extends Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      // data saves the server responds.\n      // We use this state to parse data down to the child element (Graph) as element property\n      data: [],\n    };\n  }\n\n  /**\n   * Render Graph react component with state.data parse as property data\n   */\n  renderGraph() {\n    return <Graph data={this.state.data} />;\n  }\n\n  /**\n   * Get new data from server and update the state with the new data\n   */\n  getDataFromServer() {\n    DataStreamer.getData((serverResponds: ServerRespond[]) => {\n      // Update the state by creating a new array of data that consists of\n      // Previous data in the state and the new data from server\n      this.setState({ data: [...this.state.data, ...serverResponds] });\n    });\n  }\n\n  /**\n   * Render the App react component\n   */\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Bank & Merge Co Task 2</header>\n        <div className=\"App-content\">\n          <button\n            className=\"btn btn-primary Stream-button\"\n            // when button is click, our react app tries to request\n            // new data from the server.\n            // As part of your task, update the getDataFromServer() function\n            // to keep requesting the data every 100ms until the app is closed\n            // or the server does not return anymore data.\n            onClick={() => {\n              this.getDataFromServer();\n            }}\n          >\n            Start Streaming Data\n          </button>\n          <div className=\"Graph\">{this.renderGraph()}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"
        }
    ]
}
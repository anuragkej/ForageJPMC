{
    "sourceFile": "src/Graph.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1718477558370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718477625043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   }\n \n   componentDidMount() {\n     // Get element to attach the table from the DOM.\n-    const elem: PerspectiveViewerElement = (document.getElementsByTagName(\n+    const elem = (document.getElementsByTagName(\n       \"perspective-viewer\"\n     )[0] as unknown) as PerspectiveViewerElement;\n \n     const schema = {\n"
                },
                {
                    "date": 1718477958817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,16 @@\n     if (this.table) {\n       // Load the `table` in the `<perspective-viewer>` DOM reference.\n \n       // Add more Perspective configurations here.\n+      elem.setAttribute(\"view\", \"y_line\");\n+      elem.setAttribute(\"column-pivots\", '[\"stock\"]');\n+      elem.setAttribute(\"row-pivots\", '[\"timestamp\"]');\n+      elem.setAttribute(\"columns\", '[\"top_ask_price\"]');\n+      elem.setAttribute(\n+        \"aggregates\",\n+        `{\"stock\":\"distinct count\",\"top_ask_price\":\"avg\", \"top_bid_price\":\"avg\", \"timestamp\":\"distinct count\"}`\n+      );\n       elem.load(this.table);\n     }\n   }\n \n"
                },
                {
                    "date": 1718478067619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+import React, { Component } from \"react\";\n+import { Table } from \"@finos/perspective\";\n+import { ServerRespond } from \"./DataStreamer\";\n+import \"./Graph.css\";\n+\n+/**\n+ * Props declaration for <Graph />\n+ */\n+interface IProps {\n+  data: ServerRespond[];\n+}\n+\n+/**\n+ * Perspective library adds load to HTMLElement prototype.\n+ * This interface acts as a wrapper for Typescript compiler.\n+ */\n+interface PerspectiveViewerElement extends HTMLElement {\n+  load: (table: Table) => void;\n+}\n+\n+/**\n+ * React component that renders Perspective based on data\n+ * parsed from its parent through data property.\n+ */\n+class Graph extends Component<IProps, {}> {\n+  // Perspective table\n+  table: Table | undefined;\n+\n+  render() {\n+    return React.createElement(\"perspective-viewer\");\n+  }\n+\n+  componentDidMount() {\n+    // Get element to attach the table from the DOM.\n+    const elem = (document.getElementsByTagName(\n+      \"perspective-viewer\"\n+    )[0] as unknown) as PerspectiveViewerElement;\n+\n+    const schema = {\n+      stock: \"string\",\n+      top_ask_price: \"float\",\n+      top_bid_price: \"float\",\n+      timestamp: \"date\",\n+    };\n+\n+    if (window.perspective && window.perspective.worker()) {\n+      this.table = window.perspective.worker().table(schema);\n+    }\n+    if (this.table) {\n+      // Load the `table` in the `<perspective-viewer>` DOM reference.\n+\n+      // Add more Perspective configurations here.\n+      elem.setAttribute(\"view\", \"y_line\");\n+      elem.setAttribute(\"column-pivots\", '[\"stock\"]');\n+      elem.setAttribute(\"row-pivots\", '[\"timestamp\"]');\n+      elem.setAttribute(\"columns\", '[\"top_ask_price\"]');\n+      elem.setAttribute(\n+        \"aggregates\",\n+        `{\"stock\":\"distinct count\",\"top_ask_price\":\"avg\", \"top_bid_price\":\"avg\", \"timestamp\":\"distinct count\"}`\n+      );\n+      elem.load(this.table);\n+    }\n+  }\n+\n+  componentDidUpdate() {\n+    // Everytime the data props is updated, insert the data into Perspective table\n+    if (this.table) {\n+      // As part of the task, you need to fix the way we update the data props to\n+      // avoid inserting duplicated entries into Perspective table again.\n+      this.table.update(\n+        this.props.data.map((el: any) => {\n+          // Format the data from ServerRespond to the schema\n+          return {\n+            stock: el.stock,\n+            top_ask_price: (el.top_ask && el.top_ask.price) || 0,\n+            top_bid_price: (el.top_bid && el.top_bid.price) || 0,\n+            timestamp: el.timestamp,\n+          };\n+        })\n+      );\n+    }\n+  }\n+}\n+\n+export default Graph;\n"
                }
            ],
            "date": 1718477558370,
            "name": "Commit-0",
            "content": "import React, { Component } from \"react\";\nimport { Table } from \"@finos/perspective\";\nimport { ServerRespond } from \"./DataStreamer\";\nimport \"./Graph.css\";\n\n/**\n * Props declaration for <Graph />\n */\ninterface IProps {\n  data: ServerRespond[];\n}\n\n/**\n * Perspective library adds load to HTMLElement prototype.\n * This interface acts as a wrapper for Typescript compiler.\n */\ninterface PerspectiveViewerElement extends HTMLElement {\n  load: (table: Table) => void;\n}\n\n/**\n * React component that renders Perspective based on data\n * parsed from its parent through data property.\n */\nclass Graph extends Component<IProps, {}> {\n  // Perspective table\n  table: Table | undefined;\n\n  render() {\n    return React.createElement(\"perspective-viewer\");\n  }\n\n  componentDidMount() {\n    // Get element to attach the table from the DOM.\n    const elem: PerspectiveViewerElement = (document.getElementsByTagName(\n      \"perspective-viewer\"\n    )[0] as unknown) as PerspectiveViewerElement;\n\n    const schema = {\n      stock: \"string\",\n      top_ask_price: \"float\",\n      top_bid_price: \"float\",\n      timestamp: \"date\",\n    };\n\n    if (window.perspective && window.perspective.worker()) {\n      this.table = window.perspective.worker().table(schema);\n    }\n    if (this.table) {\n      // Load the `table` in the `<perspective-viewer>` DOM reference.\n\n      // Add more Perspective configurations here.\n      elem.load(this.table);\n    }\n  }\n\n  componentDidUpdate() {\n    // Everytime the data props is updated, insert the data into Perspective table\n    if (this.table) {\n      // As part of the task, you need to fix the way we update the data props to\n      // avoid inserting duplicated entries into Perspective table again.\n      this.table.update(\n        this.props.data.map((el: any) => {\n          // Format the data from ServerRespond to the schema\n          return {\n            stock: el.stock,\n            top_ask_price: (el.top_ask && el.top_ask.price) || 0,\n            top_bid_price: (el.top_bid && el.top_bid.price) || 0,\n            timestamp: el.timestamp,\n          };\n        })\n      );\n    }\n  }\n}\n\nexport default Graph;\n"
        }
    ]
}